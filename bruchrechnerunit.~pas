unit bruchrechnerunit;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, StdCtrls, ExtCtrls;

type TRechenzeichen = (plus, minus, mal, geteilt);

type TBruch = class(TObject)

  private
    zaehler, nenner, teiler :integer;
    b1, b2, be :TBruch;
    function ggT (a, b :integer) :integer;
    function kgV (a, b :integer) :integer;
  public
     constructor create;
     procedure setBruch (z, n :integer);
     function getzaehler :integer;
     function getnenner :integer;
     function getteiler :integer;
     procedure erweitern (f: integer);
     procedure kuerzen;
end;
{
type TBruchrechner = class(TObject)

  private
    b1, b2, be :TBruch;
    function kgV (a, b :integer) :integer;
  public
    // constructor create;
     procedure rechnen (z1, n1, z2, n2 :string; rz :TRechenzeichen);
     function getEzaehler :string;
     function getEnenner :string;
end;
      }
implementation

//------------------TBruch------------------

function TBruch.ggT (a, b :integer) :integer;
var rest :integer;
begin
   rest := a mod b;
   while rest <> 0 do
   begin
      a := b;
      b := rest;
      rest := a mod b;
   end;
   ggt := b;
end;

procedure TBruch.setBruch (z, n :integer);
begin
   zaehler := z;
   nenner := n;
end;

function TBruch.getzaehler :integer;
begin
   getzaehler := zaehler;
end;

function TBruch.getnenner :integer;
begin
   getnenner := nenner;
end;

function TBruch.getteiler :integer;
begin
   getteiler := teiler;
end;

procedure TBruch.kuerzen;
begin
   teiler := ggt (zaehler, nenner);
   zaehler := zaehler div teiler;
   nenner := nenner div teiler;
end;

procedure TBruch.erweitern(f: integer);
begin
   zaehler := zaehler*f;
   nenner := nenner*f;
end;

//------------------TBruchrechner------------------

function TBruch.kgV (a, b :integer) :integer;
var k: integer;
begin
   k := a;
   while k mod b <> 0 do k := k + a;
   kgV := k;
end;
   
constructor TBruch.create;
begin
   b1 := TBruch.create;
   b2 := TBruch.create;
   be := TBruch.create;
end;
   {
procedure TBruchrechner.rechnen (z1, n1, z2, n2 :string; rz :TRechenzeichen);
var k :integer;
begin
   b1.setBruch (StrToInt (z1), StrToInt (n1));
   b2.setBruch (StrToInt (z2), StrToInt (n2));
   k := kgV (b1.getnenner, b2.getnenner);
   case rz of
   plus: begin
            be.setBruch (b1.getzaehler * k div b1.getnenner + b2.getzaehler * k div b2.getnenner, k);
         end;

   minus: begin
             be.setBruch (b1.getzaehler * k div b1.getnenner - b2.getzaehler * k div b2.getnenner, k);
          end;

   mal: begin
           be.setBruch (b1.getzaehler * b2.getzaehler, b1.getnenner * b2.getnenner);
        end;

   geteilt: begin
               be.setBruch (b1.getzaehler * b2.getnenner, b1.getnenner * b2.getzaehler);
            end;
   end;
   be.kuerzen;
end;

function TBruchrechner.getEzaehler :string;
begin
   getEzaehler := IntToStr (be.getzaehler);
end;

function TBruchrechner.getEnenner :string;
begin
   getEnenner := IntToStr (be.getnenner);
end;
          }
end.
